name: Release-CD-pipeline
# Explicitly set none for repositry trigger
trigger:
- none

resources:
  pipelines:
  - pipeline: MyAppPipeline  # Name of the pipeline resource
    source: build-CI-pipeline # Name of the triggering pipeline
    trigger: 
      branches:
        include:
         - main
         - pull/*
         - refs/pull/*
pool:
  vmImage: 'ubuntu-latest'

variables:
  vmImageName: 'ubuntu-latest'
  ArtifactName: AppBuildArtifact
  ArtifactSourceFolder: $(ArtifactName)/$(ArtifactName)
  BuildId: $(Build.BuildId)
  PipelineName: 'MyAppPipeline'
  Source: build-CI-pipeline

stages:
- stage: PR_Deploy
  condition: startsWith(variables['resources.pipeline.MyAppPipeline.sourcebranch'], 'refs/pull/') 
  variables:      
    DeploymentEnvironment: 'pr-$(prId)'
  jobs:
  - deployment: DB_PR
    environment: PR
    displayName: 'Deploy DB to the PR environment'    
    strategy:
      runOnce:
        deploy:
          steps:           
          - download: MyAppPipeline
            artifact: $(ArtifactName)
          - template: templates/GetPrId.yml
          - script: | 
              echo 'PR_DEPLOY'
            displayName: 'Deploy PR'
 
- stage: PR_Delete
  dependsOn: PR_Deploy  
  condition: succeeded('PR_Deploy')
  variables:
    K8sNamespace: '$(ApiName)-pr-$(prId)'
  jobs:  
  - deployment: Delete_PR
    environment: PR
    displayName: Delete DB from the PR environment
    strategy:
      runOnce:
        deploy:
         steps:
         - download: none
         - template: templates/GetPrId.yml
         - script: | 
              echo 'PR_DELETE'
           displayName: 'Delete PR'
- stage: Dev_Deploy
  condition: startsWith(variables['resources.pipeline.MyAppPipeline.sourcebranch'], 'refs/heads/main') 
  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev
    environment: DevDeploy
    strategy:
      runOnce:
        deploy:
          steps:
          - download: MyAppPipeline
            artifact: $(ArtifactName)
          - template: templates/deploymentJob.yml
            parameters:
              buildId: $(BuildId)
              artifactName: $(ArtifactName)
              pipelineName: $(PipelineName)
              runID: '$(PIPELINE.WORKSPACE)/MyAppPipeline/AppBuildArtifact/$(resources.pipeline.MyAppPipeline.runID)'
- stage: Test_Deploy
  condition: startsWith(variables['resources.pipeline.CustomerApiBuild.sourcebranch'], 'refs/heads/main') 
  jobs:
  - deployment: Deploy
    displayName: Deploy to Test
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: MyAppPipeline
            artifact: $(ArtifactName)        
          - template: templates/deploymentJob.yml
            parameters:
              buildId: $(BuildId)
              artifactName: $(ArtifactName)
              pipelineName: $(PipelineName)
              runID: '$(PIPELINE.WORKSPACE)/MyAppPipeline/AppBuildArtifact/$(resources.pipeline.MyAppPipeline.runID).zip'
- stage: Preprod_Deploy
  condition: startsWith(variables['resources.pipeline.CustomerApiBuild.sourcebranch'], 'refs/heads/main') 
  jobs:
  - deployment: Deploy
    displayName: Deploy to Preprod
    environment: Preprod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ManualValidation@0
            inputs:
              notifyUsers: 'kelechi_igbokwe@yahoo.com'
              instructions: 'Please approve for preprod'
          - download: MyAppPipeline
            artifact: $(ArtifactName)        
          - template: templates/deploymentJob.yml
            parameters:
              buildId: $(BuildId)
              artifactName: $(ArtifactName)
              pipelineName: $(PipelineName)
              runID: '$(PIPELINE.WORKSPACE)/MyAppPipeline/AppBuildArtifact/$(resources.pipeline.MyAppPipeline.runID).zip'
  # - deployment: Deploy
  #   displayName: Deploy
  #   environment: DevDeploy
  #   pool: 
  #     vmImage: $(vmImageName)
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:          
  #         - download: MyAppPipeline
  #           artifact: AppBuildArtifact  
  #         - task: ExtractFiles@1
  #           inputs:
  #             archiveFilePatterns: '$(PIPELINE.WORKSPACE)/MyAppPipeline/AppBuildArtifact/$(resources.pipeline.MyAppPipeline.runID).zip'
  #             destinationFolder: '$(agent.builddirectory)'
  #             cleanDestinationFolder: false
  #         - script: |  
  #             cat $(agent.builddirectory)/greatcode.txt

# jobs:
# - deployment: Deploy
#   displayName: Deploy
#   environment: DevDeploy
#   strategy:
#     runOnce:
#       deploy:
#         steps:          
#         - download: MyAppPipeline
#           artifact: AppBuildArtifact  
#         - task: ExtractFiles@1
#           inputs:
#             archiveFilePatterns: '$(PIPELINE.WORKSPACE)/MyAppPipeline/AppBuildArtifact/$(resources.pipeline.MyAppPipeline.runID).zip'
#             destinationFolder: '$(agent.builddirectory)'
#             cleanDestinationFolder: false
#         - script: |  
#             cat $(agent.builddirectory)/greatcode.txt


# jobs:  
#   - job: waitForValidation
#     displayName: Wait for external validation  
#     pool: server    
#     timeoutInMinutes: 4320 # job times out in 3 days
#     steps:   
#     - task: ManualValidation@0
#       timeoutInMinutes: 1440 # task times out in 1 day
#       inputs:
#         notifyUsers: |
#           test@test.com
#           example@example.com
#         instructions: 'Please validate the build configuration and resume'
#         onTimeout: 'resume'