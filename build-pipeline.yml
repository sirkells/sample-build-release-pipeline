trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - build-pipeline.yml
    - release-pipeline.yml

variables:
  vmImageName: 'ubuntu-latest'

jobs:  
- job: Build
  pool:
    vmImage: $(vmImageName)
  steps:
  - script: | 
      echo 'do some unit test'
    displayName: 'unit test'
  - script: | 
      echo 'compile application'
    displayName: 'compile'
  - task: ArchiveFiles@2
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      replaceExistingArchive: true
  - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    artifact: drop

  # - task: CopyFiles@2
  #     inputs:
  #       SourceFolder: '$(System.DefaultWorkingDirectory)'
  #       Contents: |
  #         **/*.yaml
  #         **/*.tf
  #       TargetFolder: '$(Build.ArtifactStagingDirectory)'
  #   - bash: ls -R $(Build.ArtifactStagingDirectory)
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #       ArtifactName: 'drop'
  #       publishLocation: 'Container'
  # - job: SecondJob
  #   steps:
  #   - bash: echo Build SecondJob
# - stage: DevDeploy
#   variables:
#     environment: Dev
#   dependsOn: Build
#   jobs:
#   - job: DevDeployJob
#     steps:
#     - bash: echo $(environment)DeployJob
# - stage: QADeploy
#   variables:
#     environment: QA
#   dependsOn: Build
#   jobs:
#   - job: QADeployJob
#     steps:
#     - bash: echo $(environment)DeployJob
# - stage: ProdDeploy
#   dependsOn: 
#   - DevDeploy
#   - QADeploy
#   jobs:
#   - job: ProdDeployJob
#     steps:
#     - bash: echo ProdDeployJob